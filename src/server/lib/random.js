/*jslint node: true */
"use strict";

require('seedrandom');

Math.seedrandom('' + Date.now());

exports.random = x => x * Math.random();
//exports.randomRound = x => Math.floor(Math.random() * x);
exports.randomAngle = () => Math.PI * 2 * Math.random();
exports.randomRange = (min, max) => Math.random() * (max - min) + min;
exports.irandom = i => {
	let max = Math.floor(i);
	return Math.floor(Math.random() * (max + 1));
};
exports.irandomRange = (min, max) => {
	min = Math.ceil(min);
	max = Math.floor(max);
	return Math.floor(Math.random() * (max - min + 1)) + min;
};
exports.gauss = (mean, deviation) => {
	let x1, x2, w;
	do {
		x1 = 2 * Math.random() - 1;
		x2 = 2 * Math.random() - 1;
		w = x1 * x1 + x2 * x2;
	} while (0 == w || w >= 1);
	w = Math.sqrt(-2 * Math.log(w) / w);
	return mean + deviation * x1 * w;
};
exports.gaussInverse = (min, max, clustering) => {
	let range = max - min,
		output = exports.gauss(0, range / clustering);
	while (output < 0) output += range;
	while (output > range) output -= range;
	return output + min;
};
exports.gaussRing = (radius, clustering) => {
	let r = exports.random(Math.PI * 2),
		d = exports.gauss(radius, radius * clustering);
	return {
		x: d * Math.cos(r),
		y: d * Math.sin(r)
	};
};
exports.chance = prob => exports.random(1) < prob;
exports.dice = sides => exports.random(sides) < 1;
exports.choose = arr => arr[exports.irandom(arr.length - 1)];
exports.chooseN = (arr, n) => {
	let o = [];
	for (let i = 0; i < n; i++) o.push(arr.splice(exports.irandom(arr.length - 1), 1)[0]);
	return o;
};
exports.chooseChance = (...arg) => {
	let totalProb = 0;
	arg.forEach(function(value) {
		totalProb += value;
	});
	let answer = exports.random(totalProb);
	for (let i = 0; i < arg.length; i++) {
		if (answer < arg[i]) return i;
		answer -= arg[i];
	}
};
exports.chooseBotName = () => exports.choose([
	'Alice',
	'Bob',
	'Carmen',
	'David',
	'Edith',
	'Freddy',
	'Gustav',
	'Helga',
	'Janet',
	'Lorenzo',
	'Mary',
	'Nora',
	'Olivia',
	'Peter',
	'Queen',
	'Roger',
	'Suzanne',
	'Tommy',
	'Ursula',
	'Vincent',
	'Wilhelm',
	'Xerxes',
	'Yvonne',
	'Zachary',
	'Alpha',
	'Bravo',
	'Charlie',
	'Delta',
	'Echo',
	'Foxtrot',
	'Hotel',
	'India',
	'Juliet',
	'Kilo',
	'Lima',
	'Mike',
	'November',
	'Oscar',
	'Papa',
	'Quebec',
	'Romeo',
	'Sierra',
	'Tango',
	'Uniform',
	'Victor',
	'Whiskey',
	'X-Ray',
	'Yankee',
	'Zulu',
	// Other names
	'[MG] Team',
	'team??!',
	'trump',
	'facu++',
	'TEST',
	'Jake',
	'PEST_YT',
	'GOKU',
	'big me!',
	'arras > diep',
	'k',
	'[MG] PRO TEAM',
	'Solomon',
	'novice',
	'noob',
	'Angel',
	'ðŸ˜ˆ',
	'max',
	'Allah Is King',
	'Hug Me',
	'dont touch me',
	'leonardo',
	'colombia',
	'',
	'',
	'',
	'Friends?',
	'âœˆ',
	'Kim Jong-Un',
	'1',
	'An unnamed player',
	'agar.io',
	'road to 1m',
	'FEED ME',
	'DOGE',
	'GABE',
	'boi',
	'[GZ] team',
	'buff arena closer',
	'.',
	'Ramen',
	'SPICY RAMEN',
	'Jera',
	'[insert creative name]',
	//'hellcake',
	'arras.io',
	//'Raiko',
	'KOA',
	'die',
	'king of diep',
	'Hagalaz',
	'Ehwaz',
	'Dagaz',
	'Berkanan',
	'Algiz',
	'Blank',
	//'Yuuka',
	'Mango',
	'TOUCAN',
	'â€€Bee',
	'Honeyâ€€Bee',
	'oof',
	'Toast',
	//'Youmu',
	//'Yuyuko',
	//'Captian Murasa',
	'Alexis',
	'FeZTiVAl',
	'kitten',
	'Derp',
	'Gabogc',
	'Uâ€€Sâ€€A',
	'name',
	'[IX] clan',
	'LOL',
	'ur mom',
	'llego el pro!',
	'Impeach Trump',
	'luka modric',
	'bob',
	'MATRIX',
	'no',
	'e',
	'kek',
	'read and u gay',
	'Decagon?',
	'take this L',
	'mm',
	'Aleph Null',
	'summoner',
	'T-REX',
	'buff basic',
	'stink',
	'jumla',
	'no team Kill',
	'pet',
	'V',
	'Broccoli',
	'toon',
	'Sinx',
	'JTG',
	'Hammer',
	' ',
	'Basic',
	'Discord',
	'NO WITCH-HUNTING',
	'salty',
	'CJ',
	'angel',
	//'the salty discord kid'
	'satan',
	'NoCopyrightSounds',
	'Am I Sinbadx?'
]);
// TO DO: Make one of these but with bosses
exports.chooseTank = type => {
	switch (type) {
		case 'norm':
			return exports.choose([
				'basic',
				'twin',
				'sniper',
				'machine',
				'pounder',
				'director',
				'flank',
				'double',
				'hexa',
				'bent',
				'pellet',
				'assassin',
				'mini',
				'builder',
				'hunter',
				'destroyer',
				'artillery',
				'flankPound',
				'gunner',
				'blaster',
				'hexa',
				'tri',
				'auto3',
				'flankTrap',
				'overseer',
				'cruiser',
				'underseer',
				'littleFactory',
				'single',
				'dual',
				'twinSniper',
				'bulwark',
				'insect',
				'heavyQuad',
				'flankDestroy',
				'tripleTwin',
				'hewnDouble',
				'autoDouble',
				'battleship',
				'penta',
				'spread',
				'benthybrid',
				'bentDouble',
				'triple',
				'sunburst',
				'bentBlaster',
				'autoGunner',
				'nailgun',
				'auto4',
				'machineGunner',
				'guntrap',
				'hurricane',
				'battery',
				'snipeGuard',
				'predator',
				'poach',
				'rocketeer',
				'skimmer',
				'shift',
				'demoman',
				'carnivore',
				'devastator',
				'construct',
				'autoBuilder',
				'engineer',
				'boomer',
				'twinBuilder',
				'mechaTrap',
				'musket',
				'spray',
				'autoMachine',
				'flooder',
				'twinBlaster',
				'gatling',
				'annihilator',
				'hybrid',
				'shotgun',
				'autoDestroy',
				'hiveShooter',
				'steamroll',
				'sheller',
				'mortar',
				'autoArtillery',
				'marauder',
				'intercept',
				'cannon',
				'stream',
				'hybridMini',
				'autoMini',
				'autoMaton',
				'silo',
				'hotshot',
				'master',
				'triCruiser',
				'fighter',
				'booster',
				'autotri',
				'falconBot',
				'bomber',
				'surfer',
				'auto5',
				'heavy3',
				'sniper3',
				'builder3',
				'machine3',
				'shuriken',
				'banshee',
				'fortress',
				'chimera',
				'factory',
				'sniperFactory',
				'machineFactory',
				'overlord',
				'overtrap',
				'overgunner',
				'autoOverseer',
				'manager',
				'necromancer',
				'autoUnderseer',
				'carrier',
				'autoCruiser',
				'fatCruiser',
				'autoSmash',
				'octo',
				'miniSpread',
				'autoMiniSpread',
				'spreadbow',
				'autoPellet',
				'griefer',
				'nightseeker',
				'sounder',
				'fielder',
				'boxer',
				'guardSpreadling',
				'charger',
				'half',
				'volcano',
				'howitzer',
				'scaler',
				'dreadnought',
				'trapperFactory',
				'spreadTrap',
				'hewnGunner',
				'heavyRifle',
				'gunRifle',
				'spreadRifle',
				'assaultRifle',
				'sniperRifle',
				'stalkRifle',
				'beehive',
				'flankMachine',
				'triMachine',
				'blasterSpray',
				'railgun',
				'autoPounder',
				'autoFlankPound',
				'triPellet',
				'pentaPellet',
				'gunborer',
				'scorpion',
				'piercer',
				'punter',
				'puntMini',
				'sword',
				'warship',
				'moonburst',
				'autoBorer',
				'autoPunt',
				'autoHewnPellet',
				'autoSail',
				'hybridPellet',
				'hybridBorer',
				'hybridPunt',
				'hybridHewnPellet',
				'hybridSail',
				'split',
				'clicker',
				'rifleClicker',
				'megaClicker',
				'longClicker',
				'eagleBot',
				'aagun',
				'fieldGun',
				'autoRifle',
				'hybridRifle',
				'hybridAssassin',
				'hybridBuilder',
				'lightning',
				'littleSkimmer',
				'autoLauncher',
				'fatSkimmer',
				'poundAngle',
				'autoTwinSniper',
				'twinAssassin',
				'trapper',
				'triTrapper',
				'autoTrapper',
				'obliterator',
				'plow',
				'crusher',
				'bulldozer',
				'spinner',
				'miniClicker',
				'doubleGuard',
				'triContagion',
				'contagion',
				'autoContagion',
				'droneContagion',
				'fort',
				'longBorer',
				'multishot',
				'machshot',
				'longshot',
				'miniMultishot',
				'megaTrapper',
				'autoMegaTrapper',
				'gigaTrapper',
				'megaContagion',
				'plaguer',
				'triRocket',
				'spreadHunter',
				'maleficitor',
				'refractor',
				'flankBuilder',
				'swarmBuilder',
				'swarmMegaTrapper',
				'swarmContagion',
				'twinSpreadling',
				'heavyTwin',
				'seek',
				'fastGatling',
				'gatlingSpray',
				'autoSpray',
				'twinFactory',
				'rifleTrap',
				'swarmArtillery',
				'twinRifle',
				'quadGuard',
				'overdrive',
				'conq',
				'thrower',
				'trapSkimmer',
				'hybridArtillery',
				'twinTrapper',
				'twinContagion',
				'swarmTwinTrapper',
				'longContagion',
				'diver',
				'doubleSwarm',
				'heavyOverseer',
				'submarine',
				'manyshot',
				'undergunner',
				'undertrap',
				'machineTrapper',
				'blasterTrapper',
				'gatlingTrapper',
				'machineBuilder',
				'bentTrapper',
				'doubleTrapper',
				'autoMachineTrapper',
				'autoTwinTrapper',
				'trapperAutoTrapper',
				'marine',
				'torpedoer',
				'triBorer',
				'triHewnPellet',
				'triPunt',
				'quint',
				'megaAnnihilator',
				'twinRanger',
				'snipewark',
				'starbomber',
				'quadTwin',
				'quadMachine',
				'hyperSkimmer',
				'rangerGatling',
				'widespread',
				'longRanger',
				'auto7',
				'autoDoubleTrapper',
				'bentTrapper',
				'streamTrap',
				'clover',
				'miniBuilder',
				'heavy5',
				'sniper5',
				'machine5',
				'auto6',
				'assassin3',
				'obliterator3',
				'overwork',
				'hottershot',
				'hybridStream',
				'builderFactory',
				'boostRocket',
				'longHotshot',
				'smother',
				'tripleDual',
				'siloStream',
				'heavyOverlord',
				'quadDestroy',
				'hexaPound',
				'autoHexaTrap',
				'hexaTrap',
				'octoTrap',
				'xPredator',
				'spreadMach',
				'teraTrapper',
				'trapdrive',
				'gundrive',
				'harddrive',
				'hyperdrive',
				'juggernaut',
				'megaBarricade',
				'fatFactory',
				'hybridBarricade',
				'autoHeavyDouble',
				'heavyDouble',
				'flankAnni',
				'flankSeeker',
				'wideCannon',
				'quadBuilder',
				'twinTri',
				'shellerMortar',
				'anniSheller',
				'pentaSunburst',
				'twinSingle',
				'sniperSingle',
				'machineSingle',
				'flankSingle',
				'autoSingle',
				'hybridSingle',
				'tripleTrapper',
				'deca',
				'anniHybrid',
				'twinTrapperConq',
				'brutalizer',
				'twinAngleFighter',
				'anniSteamroll',
				'hexaContagion',
				'rangerObliterator',
				'builderArtillery',
				'builderMortar',
				'nanogun',
				'pebbler',
				'tripleHeavyTwin',
				'predatorDual',
				'megafort',
				'assassinTrapGuard',
				'woodpeckBot',
				'scythe',
				'trebuchet',
				'rewinder',
				'snipeBuilder',
				'twinAutoTwin',
				'anniIntercept',
				'xCarnivore',
				'bentTripleTwin',
				'heavyTriple',
				'invisibuilder',
				'megaConstruct',
				'machTriple',
				'snipeTriple',
				'flankTriTrap',
				'interceptTwin',
				'flankTriple',
				'dreadning',
				'drivenaught',
				'interceptMach',
				'interceptSnipe',
				'flankBentTrapper',
				'machineAutoMachine',
				'interceptPound',
				'interceptTrap',
				'interceptFlank',
				'doubleInsect',
				'predaNightseeker',
				'invisianni',
				'pistol',
				'snipeception',
				'hawkBot',
				'ySpreadHunter',
				'xSpreadHunter',
				'pentaBorer',
				'pentaPunt',
				'pentaHewnPellet',
				'anniConq',
				'poundception',
				'mortarMarauder',
				'pelletception',
				'destroyception',
				'overdriveHybrid',
				'gatlingMachGunner',
				'blasterMachGunner',
				'floodStream',
				'hybridFlooder',
				'interceptPellet',
				'puntStream',
				'wreckingBall',
				'hepta',
				'nailtrap',
				'invisispawner',
				'pentamancer',
				'blockSkimmer',
				'overdriveMaster',
				'staplegun',
				'overmaster',
				'battlenaught',
				'flankception',
				'pentaBlaster',
				'bentBlasterHybrid',
				'twinDestroyer',
				'extraHeavyDouble',
				'puntTrapGuard',
				'twinBoost',
				'blower',
				'buttbuttin',
				'operator',
				'doubleception',
				'hexaception',
				'machPistol',
				'pistolTrap',
				'moreFortress',
				'gunAngle',
				'owlBot',
				'hummingbirdBot',
				'sparrowBot',
				'megaEngineer',
				'fatBattleship',
				'engineer3',
				'boomerEngineer',
				'machEngineer',
				'twinEngineer',
				'poundEngineer',
				'arsenal',
				'machArsenal',
				'megaArsenal',
				'autoOcto',
				'triArsenal',
				'trapGunner',
				'gigaArsenal',
				'triMachTrapper',
				'machMegaTrapper',
				'wideMortar',
				'autoMachGunner',
				'triMachArsenal',
				'trapMachGunner',
				'superMachGunner',
				'autoTripleTwin',
				'megamine',
				'gigaSmash',
				'constructArtillery',
				'streamClicker',
				'miniPuncher',
				'autoStream',
				'hybridSilo',
				'hybridSealer'
			]);
		case 'smash':
			return exports.choose([
				'smash',
				'megaSmash',
				'spike',
				'autoSmash',
				'landmine',
				'invisispike',
				'chainsaw'
				//'jumpSmash'
			]);
		case 'boost':
			return exports.choose([
				'tri',
				'autotri',
				'booster',
				'surfer',
				'falconBot',
				'eagleBot',
				'poundAngle',
				'triRocket',
				'diver',
				'boostRocket',
				'brutalizer'
			]);
	}
};
const setSkill = (s1, s2, s3, s4, s5, s6, s7, s8, s9, s10) => [s7, s5, s4, s6, s3, s10, s1, s2, s9, s8];
exports.chooseBuild = type => {
	switch (type) {
		case 'norm':
			return exports.choose([
				setSkill(0, 0, 9, 7, 7, 7, 9, 3, 0, 0),
				setSkill(0, 0, 9, 7, 8, 7, 9, 2, 0, 0),
				setSkill(0, 0, 9, 8, 8, 8, 9, 0, 0, 0),
				setSkill(0, 0, 7, 7, 7, 7, 9, 5, 0, 0),
				setSkill(0, 3, 9, 7, 7, 7, 9, 0, 0, 0),
				setSkill(0, 0, 9, 6, 6, 6, 9, 6, 0, 0),
				setSkill(0, 0, 5, 7, 7, 7, 8, 8, 0, 0),
				setSkill(0, 0, 7, 7, 7, 7, 7, 7, 0, 0),
				setSkill(0, 0, 9, 5, 5, 5, 9, 9, 0, 0)
			]);
		case 'smash':
			return exports.choose([
				setSkill(12, 12, 0, 0, 0, 0, 0, 12, 3, 3),
				setSkill(12, 12, 0, 0, 0, 0, 6, 12, 0, 0),
				setSkill(12, 12, 0, 0, 0, 0, 6, 12, 0, 6),
				setSkill(12, 12, 0, 0, 0, 0, 6, 12, 6, 0),
				setSkill(11, 11, 0, 0, 0, 0, 0, 12, 0, 8)
			]);
		case 'boost':
			return exports.choose([
				setSkill(9, 9, 0, 0, 0, 0, 9, 9, 3, 3),
				setSkill(9, 9, 0, 0, 0, 0, 9, 9, 0, 6),
				setSkill(9, 9, 0, 0, 0, 0, 9, 9, 6, 0),
				setSkill(8, 8, 0, 0, 0, 0, 9, 9, 0, 8),
				setSkill(8, 8, 0, 0, 0, 0, 9, 9, 4, 4)
			]);
	}
};
exports.chooseBossName = (code, n) => {
	switch (code) {
		case 'a':
			return exports.chooseN([
				'Archimedes',
				'Akilina',
				'Anastasios',
				'Athena',
				'Alkaios',
				'Amyntas',
				'Aniketos',
				'Artemis',
				'Anaxagoras',
				'Apollon'
			], n);
		case 'castle':
			return exports.chooseN([
				'Berezhany',
				'Lutsk',
				'Dobromyl',
				'Akkerman',
				'Palanok',
				'Zolochiv',
				'Palanok',
				'Mangup',
				'Olseko',
				'Brody',
				'Isiaslav',
				'Kaffa',
				'Bilhorod'
			], n);
		default:
			return 'k';
	}
};